// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"
	"database/sql"
)

const getActiveAlerts = `-- name: GetActiveAlerts :many
SELECT data
FROM alerts
WHERE ended IS NULL
`

func (q *Queries) GetActiveAlerts(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getActiveAlerts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlert = `-- name: GetAlert :one
SELECT data
FROM alerts
WHERE fingerprint = ?1
`

func (q *Queries) GetAlert(ctx context.Context, fingerprint string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAlert, fingerprint)
	var data interface{}
	err := row.Scan(&data)
	return data, err
}

const getAlerts = `-- name: GetAlerts :many
SELECT data
FROM alerts
ORDER BY severity DESC, started DESC, ended DESC
`

func (q *Queries) GetAlerts(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlerts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsBetween = `-- name: GetAlertsBetween :many
SELECT data
FROM alerts
WHERE started BETWEEN ?1 AND ?2
ORDER BY severity DESC, started DESC, ended DESC
`

type GetAlertsBetweenParams struct {
	Start int64 `json:"start"`
	End   int64 `json:"end"`
}

func (q *Queries) GetAlertsBetween(ctx context.Context, arg GetAlertsBetweenParams) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsBetween, arg.Start, arg.End)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsByInstance = `-- name: GetAlertsByInstance :many
SELECT data
FROM alerts
WHERE instance = ?1
ORDER BY severity DESC, started DESC, ended DESC
`

func (q *Queries) GetAlertsByInstance(ctx context.Context, instance string) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsByInstance, instance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsBySeverity = `-- name: GetAlertsBySeverity :many
SELECT data
FROM alerts
WHERE severity = ?1
ORDER BY started DESC, ended DESC
`

func (q *Queries) GetAlertsBySeverity(ctx context.Context, severity int64) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsBySeverity, severity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsToday = `-- name: GetAlertsToday :many
SELECT data
FROM alerts
WHERE ended IS NULL OR (
    ended >= strftime('%s', 'now', 'start of day') AND
    ended < strftime('%s', 'now', 'start of day', '+1 day')
    )
ORDER BY severity DESC, started DESC, ended DESC
`

func (q *Queries) GetAlertsToday(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsToday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsTodayResolved = `-- name: GetAlertsTodayResolved :many
SELECT data
FROM alerts
WHERE ended >= strftime('%s', 'now', 'start of day') AND
      ended < strftime('%s', 'now', 'start of day', '+1 day')
ORDER BY severity DESC, started DESC, ended DESC
`

func (q *Queries) GetAlertsTodayResolved(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsTodayResolved)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlertsYesterday = `-- name: GetAlertsYesterday :many
SELECT data
FROM alerts
WHERE ended >= strftime('%s', 'now', 'start of day', '-1 day') AND
      ended < strftime('%s', 'now', 'start of day')
ORDER BY severity DESC, started DESC, ended DESC
`

func (q *Queries) GetAlertsYesterday(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsYesterday)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var data interface{}
		if err := rows.Scan(&data); err != nil {
			return nil, err
		}
		items = append(items, data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestReport = `-- name: GetLatestReport :one
SELECT id, date, severity_count
FROM reports
ORDER BY date DESC
LIMIT 1
`

func (q *Queries) GetLatestReport(ctx context.Context) (Report, error) {
	row := q.db.QueryRowContext(ctx, getLatestReport)
	var i Report
	err := row.Scan(&i.ID, &i.Date, &i.SeverityCount)
	return i, err
}

const getReport = `-- name: GetReport :one
SELECT id, date, severity_count FROM reports WHERE id = ?1
`

func (q *Queries) GetReport(ctx context.Context, id int64) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReport, id)
	var i Report
	err := row.Scan(&i.ID, &i.Date, &i.SeverityCount)
	return i, err
}

const saveAlert = `-- name: SaveAlert :exec
INSERT INTO alerts (
    fingerprint,
    name,
    started,
    ended,
    severity,
    instance,
    data
)
VALUES (
    json_extract(?1, '$.fingerprint'),
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?1
)
ON CONFLICT(fingerprint) DO UPDATE SET
    ended=excluded.ended,
    data=excluded.data
`

type SaveAlertParams struct {
	Data     interface{}   `json:"data"`
	Name     string        `json:"name"`
	Started  int64         `json:"started"`
	Ended    sql.NullInt64 `json:"ended"`
	Severity int64         `json:"severity"`
	Instance string        `json:"instance"`
}

func (q *Queries) SaveAlert(ctx context.Context, arg SaveAlertParams) error {
	_, err := q.db.ExecContext(ctx, saveAlert,
		arg.Data,
		arg.Name,
		arg.Started,
		arg.Ended,
		arg.Severity,
		arg.Instance,
	)
	return err
}

const saveReport = `-- name: SaveReport :exec
INSERT INTO reports (date, severity_count) VALUES (?1, ?2)
`

type SaveReportParams struct {
	Date          sql.NullString `json:"date"`
	SeverityCount sql.NullString `json:"severity_count"`
}

func (q *Queries) SaveReport(ctx context.Context, arg SaveReportParams) error {
	_, err := q.db.ExecContext(ctx, saveReport, arg.Date, arg.SeverityCount)
	return err
}
